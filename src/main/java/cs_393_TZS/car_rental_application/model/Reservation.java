package cs_393_TZS.car_rental_application.model;
import jakarta.persistence.*;

import java.beans.Transient;
import java.time.LocalDateTime;
import java.util.List;
import java.util.Random;
import java.util.UUID;
/*
Responsible for managing reservations for a car.
Reservation will have
• Reservation number (must be autogenerated 8 digit string)
• Creation date
• Pick-up date and time
• Drop-off date and time
• Pick-up location
• Drop-off location
• Return date
• Status
• Member
Reservation can have different status:
ACTIVE, PENDING, CONFIRMED, COMPLETED, CANCELLED, NONE
If reservation completed, same car can be used for another reservation
 */

@Entity
public class Reservation {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    private String reservationNumber;
    private LocalDateTime creationDate;
    private  LocalDateTime pickUpDate;
    private LocalDateTime dropOffDate;

    @ManyToOne
    @JoinColumn(name = "pickUpLocationId",nullable = false)
    private Location pickUpLocation;

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "dropOffLocationId",nullable = false)
    private Location dropOffLocation;

    private LocalDateTime returnDate;

    @Enumerated(EnumType.STRING)
    private ReservationStatus status;

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "memberId",nullable = false)
    private Member member;

    @ManyToOne(fetch = FetchType.LAZY)
    private Equipment equipment;

    @ManyToOne(fetch = FetchType.LAZY)
    private Service service;

    @Transient
    private double totalCost;

    @ManyToMany
    @JoinTable(
        name = "reservation_equipment",
        joinColumns = @JoinColumn(name = "reservation_id"),
        inverseJoinColumns = @JoinColumn(name = "equipment_id")
    )
    private List<Equipment> equipmentList;

    @ManyToMany
    @JoinTable(
        name = "reservation_service",
        joinColumns = @JoinColumn(name = "reservation_id"),
        inverseJoinColumns = @JoinColumn(name = "service_id")
    )
    private List<Service> serviceList;


    public Reservation() {
    }

    public Reservation(LocalDateTime creationDate, LocalDateTime pickUpDate, LocalDateTime dropOffDate, Location pickUpLocation, Location dropOffLocation, LocalDateTime returnDate, ReservationStatus status, Member member) {
        this.creationDate = creationDate;
        this.pickUpDate = pickUpDate;
        this.dropOffDate = dropOffDate;
        this.pickUpLocation = pickUpLocation;
        this.dropOffLocation = dropOffLocation;
        this.returnDate = returnDate;
        this.status = status;
        this.member = member;
    }


    //if we want to generate automatically reservation number
    // 8 digit string
    //UUID kullanmak daha safe miş o yüzden bunu kullandım yoksa random kullanmıştım
    @PrePersist //before saving to database
    public void generateReservationNumber(){
        this.reservationNumber = UUID.randomUUID().toString().substring(0, 8).toUpperCase(); // A1B2C3D4 gibi bir şey oluşturacak
    }

    public String getReservationNumber() {
        return reservationNumber;
    }

    public void setReservationNumber(String reservationNumber) {
        this.reservationNumber = reservationNumber;
    }

    public LocalDateTime getCreationDate() {
        return creationDate;
    }

    public void setCreationDate(LocalDateTime creationDate) {
        this.creationDate = creationDate;
    }

    public LocalDateTime getPickUpDate() {
        return pickUpDate;
    }

    public void setPickUpDate(LocalDateTime pickUpDate) {
        if (pickUpDate.isBefore(LocalDateTime.now())) {
            throw new IllegalArgumentException("Invalid date! Pickup date can't be in the past.");
        }
        this.pickUpDate = pickUpDate;
    }


    public LocalDateTime getDropOffDate() {
        return dropOffDate;
    }

    public void setDropOffDate(LocalDateTime dropOffDate) {
        if (dropOffDate.isBefore(pickUpDate)) {
            throw new IllegalArgumentException("Invalid date! Dropoff date can't be before pickup date.");
        }
        this.dropOffDate = dropOffDate;
    }

    public Location getPickUpLocation() {
        return pickUpLocation;
    }

    public void setPickUpLocation(Location pickUpLocation) {
        this.pickUpLocation = pickUpLocation;
    }

    public Location getDropOffLocation() {
        return dropOffLocation;
    }

    public void setDropOffLocation(Location dropOffLocation) {
        this.dropOffLocation = dropOffLocation;
    }

    public LocalDateTime getReturnDate() {
        return returnDate;
    }

    public void setReturnDate(LocalDateTime returnDate) {
        if(returnDate!=null  && returnDate.isBefore(dropOffDate)){
            throw new IllegalArgumentException("Invalid date! Return date can't be before dropoff date.");
        }
        this.returnDate = returnDate;
    }

    public ReservationStatus getStatus() {
        return status;
    }

    public void setStatus(ReservationStatus status) {
        this.status = status;
    }

    public Member getMember() {
        return member;
    }

    public void setMember(Member member) {
        this.member = member;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }



    @Override
    public String toString() {
        return "Reservation{" +
                "id=" + id +
                ", reservationNumber='" + reservationNumber + '\'' +
                ", creationDate=" + creationDate +
                ", pickUpDate=" + pickUpDate +
                ", dropOffDate=" + dropOffDate +
                ", status=" + status +
                '}';
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        Reservation that = (Reservation) o;
        return id != null && id.equals(that.id);
    }

    @Override
    public int hashCode() {
        return id != null ? id.hashCode() : 0;
    }

}
